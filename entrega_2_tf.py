# -*- coding: utf-8 -*-
"""Entrega 2 TF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1po1QffSbXR4dX5tXKCwAWTgGPUZdnAzB

## **Entrega final 2**

##**1.1 ESTRUCTURA DEL TRABAJO**
"""

#A) carga de paquetes
import pandas as pd
import numpy as np
import io
import plotly.express as px
!pip install geojson
import geojson
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
import plotly.graph_objects as go

from google.colab import drive
drive.mount('/content/drive')

#A) Carga de datos 
birth = pd.read_excel('/content/drive/MyDrive/BD analítica 1/NBA Birth Place T.xlsx')
data = pd.read_excel('/content/drive/MyDrive/BD analítica 1/nba_data_processed T.xlsx')
draft = pd.read_excel('/content/drive/MyDrive/BD analítica 1/nba_draft_combine_all_years T.xlsx')

"""##**DEFINICIÓN DE VARIABLES**

**BIRTH PLACE**

Esta base contiene la fecha y lugar de nacimiento los jugadores de la nba, además de estadísticas de los mismos.

● Player: Jugador

● Yrs: Número de años

● G: Juegos

● MP: Minutos jugados

● FG: Puntos de campo

● FGA: Puntos de campo intentado

● 3P: Puntos triples

● 3PA: Puntos triples / intentos

● FT: Tiros libres

● FTA: Tiros libres / intentos

● ORB: Rebotes onfensivos

● TRB: Rebotes totales

● AST: Asistencias

● STL: Robos

● BLK: Bloqueos

● TOV: Pérdidas de balón

● PF: Faltas personales

● PTS: Puntos

● FG%: Porcentaje gol de campo por juego

● 3P%: Porcentaje puntos triples por juego

● FT%: Porcentaje tiros libres por juego

● MP%: Porcentaje de minutos jugados por juego

● PTS%: Porcentaje de puntos por juego

● TRB%: Porcentaje de rebotes por juego

● AST%: Porcentaje de asistencias por 

● DATE: Fecha de nacimiento

● CITY: Ciudad de nacimiento

● STATE: Estado de nacimiento

**DATA PROCESSED**

Esta base contiene el equipo al que pertenece cada jugador y gran cantidad de estadísticas individuales.

● Player: string - Nombre

● Pos (Position): string - Posición

● Age: integer - Edad del jugador hasta 02/01/2023

● Tm (Team): string - Equipo para el que juega

● G (Games Played): integer - Juegos

● GS (Games Started): integer - Juegos de titular

● MP (Minutes Played): integer - Minutos jugados

● FG (Field Goals): integer - Goles de campo

● FGA (Field Goal Attempts): integer - Intento de gol de campo

● FG% (Field Goal Percentage): float - Porcentaje de gol de campo

● 3P (3-Point Field Goals): integer - Número de triples anotados

● 3PA (3-Point Field Goal Attempts): integer - Número de intentos de triple

● 3P% (3-Point Field Goal Percentage): float - Porcentaje de triples anotados

● 2P (2-Point Field Goals): integer - Tiros de 2 puntos anotados

● 2PA (2-point Field Goal Attempts): integer - Tiros de 2 puntos intentados

● 2P% (2-Point Field Goal Percentage): float - Porcentaje de tiros de 2 puntos anotados

● eFG% (Effective Field Goal Percentage): float - Porcentaje de efectividad de goles campo

● FT (Free Throws): integer - Tiros libres

● FTA (Free Throw Attempts): integer - Tiros libres intentados

● FT% (Free Throw Percentage): float - Porcentaje de tiros libres anotados

● ORB (Offensive Rebounds): integer - Rebotes ofensivos

● DRB (Defensive Rebounds): integer - Rebotes defensivos

● TRB (Total Rebounds): integer - Rebotes totales del jugador

● AST (Assists): integer - Asistencias

● STL (Steals): integer - Robos

● BLK (Blocks): integer - Bloqueos

● TOV (Turnovers): integer - Pérdidas de balón

● PF (Personal Fouls): integer - Faltas personales

● PTS (Points): integer - Puntos anotados

**DRAFT COMBINE ALL YEARS**

Esta base contiene todos los datos pertinentes a los draft entre 2009-2017 al igual que características físicas de cada jugador.

**Draft**: ceremonia celebrada cada año en algunos deportes donde los equipos profesionales tienen la oportunidad de elegir los mejores jugadores de las ligas amateur y así ofrecerles un contrato en primera división.

● Player = jugador

● Year = año del drift

● Draft pick = turno de escogida en el drift

● Height (No Shoes) = altura sin zapatos

● Height (With Shoes) = altura con zapatos

● Wingspan = envergadura

● Standing reach = alcance de pie

● Vertical (Max) = vertical máximo

● Vertical (Max Reach) = alcance vertical máximo

● Vertical (No Step) = vertical sin paso

● Vertical (No Step Reach) = alcance vertical sin paso

● Weight = peso

● Body Fat = grasa corporal

● Hand (Length) = longitud de la mano

● Hand (Width) = ancho de la mano

● Bench = banco

● Agility = agilidad

● Sprint = aceleración o piqué

##**1.2 HOMOLOGACIÓN**
"""

#Se consultan las columnas que tiene el DF de birtplace
birth.columns

#Se decide eliminar las columnas que estén asociadas a intentos (attemps) de alguna acción de juego ya que también contamos con 
#los porcentajes de acierto de cada acción. También se elimina la columna de fecha de nacimiento ya que se hace
#irrelevante dentro de la investigación debido a que ya hay una columna con la edad del jugador.
#Finalmente se elimina la columna de ciudad ya que hay una gran cantidad de ciudades en EE.UU y para mejor entendimiento
#de los resultados se trabajará con los estados de nacimiento.
birth = birth[['Player', 'Yrs', 'G', 'MP', 'FG', '3P', 'FT',
       'ORB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'PTS', 'FG%', '3P%',
       'FT%', 'MP.1', 'PTS.1', 'TRB.1', 'AST.1', 'State']]

#Se consultan las columnas que tiene el DF de data processed
data.columns

#Se decide eliminar las columnas que estén asociadas a intentos (attemps) de alguna acción de juego ya que también contamos con 
#los porcentajes de acierto de cada acción. 
data = data[['Player', 'Pos', 'Age', 'Tm', 'G', 'MP', 'FG', 'FG%', '3P',
             '3P%', '2P', '2P%', 'eFG%', 'FT', 'FT%', 'ORB',
       'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'PTS']]

#Se consultan las columnas que tiene el DF de draft 
draft.columns

#Se decide eliminar las columnas de tamaño de las manos, grasa corporal y las subcategorías de alcance vertical
#ya que no se hace relevante para la investigación, además de que se cree que son factores que los equipos
#ya tienen en cuenta internamente para fines médicos y no tanto para fines de rendimiento deportivo.
#Además se eliminó una de las subcategroías de altura (altura sin calzado) ya que la altura es relevante solamente
#con el calzado puesto ya que así es que compiten en la liga
draft = draft[['Player', 'Year', 'Draft pick', 'Height (With Shoes)', 'Wingspan',
               'Vertical (Max)', 'Weight', 'Bench', 'Agility', 'Sprint']]

#Se consultan la columna State del DF birth para ver si hay registros mal escritos y se observa que los datos diferentes
#son 50, que es igual al número de estados que hay en EE.UU
pd.set_option("display.max_rows", None)
birth["State"].value_counts()

#Se consultan la columna Tm del DF data para ver si hay registros mal escritos y parecen estar en orden
pd.set_option("display.max_rows", None)
data["Tm"].value_counts()

#Se vuelven todas las columnas a minúsculas
birth.columns = birth.columns.str.lower()
data.columns = data.columns.str.lower()
draft.columns = draft.columns.str.lower()

#Se organizan las columnas para que queden con los nombre correctos y sin espacios por medio de diccionarios.
birth.rename(columns={"mp.1":"mp%", "pts.1":"pts%", "trb.1":"trb%", "ast.1":"ast%"},
               inplace=True)
draft.rename(columns={"draft pick":"draft_pick", "height (with shoes)":"height",
                 "vertical (max)":"vertical"}, inplace=True)

"""##**1.3 DEPURACIÓN**

**DF BIRTH**
"""

birth.columns

birth.isnull().sum()

#Se grafican las columnas con datos nulos que representan un porcentaje
# definir gráfica
fig = px.line(birth, y=['fg%', '3p%', 'ft%', 'mp%', 'trb%'], title ='<b>columnas con nulos que representan un porcentaje<b>')

# agregar detalles
fig.update_layout(
    xaxis_title = 'índice',
    yaxis_title = 'valor',
    template = 'simple_white',
    title_x = 0.5,
    legend_title = 'nombre de la columna:')

fig.show()

#Se decidió rellenar las estadísticas que son un porcentaje con el promedio de todos los jugadores ya que la gráfica
#presenta este comportamiento. Cabe resaltar que se respetará la estadística (fg%, 3p%, etc.) y el promedio se calcula 
#sobre cada columna para así no generar outliers ya que a pesar de que la gráfica se comporta con medias constantes,
#cada promedio es diferente.

#Sin tener que graficar los nulos de las estadísticas como minutos jugados (mp), tiros de 3 puntos (3p) y 
#total de rebotes (trb) sabemos que se pueden llenar con un valor muy cercano al real que deberían tener, ya que se 
#puede calcular multiplicando el porcentaje por los juegos (g) entonces no es necesario llenarlo con promedios o quitar 
#los datos

birth = birth.fillna({'fg%':birth['fg%'].mean(), '3p%':birth['3p%'].mean(), 'ft%':birth['ft%'].mean(), 
              'mp%':birth['mp%'].mean(), 'trb%':birth['trb%'].mean(), 'mp':birth['mp%']*birth['g'],
              'trb':birth['trb%']*birth['g'], '3p':birth['3p%']*birth['g']})
birth = birth.fillna({'mp':birth['mp%']*birth['g'], 'trb':birth['trb%']*birth['g'], '3p':birth['3p%']*birth['g']})
birth.head(300)

#Se grafican las columnas con datos nulos restantes
# definir gráfica
fig = px.line(birth, y=['orb', 'stl', 'blk', 'tov'], title ='<b>columnas restantes con datos nulos<b>')

# agregar detalles
fig.update_layout(
    xaxis_title = 'índice',
    yaxis_title = 'valor',
    template = 'simple_white',
    title_x = 0.5,
    legend_title = 'nombre de la columna:')

fig.show()

birth.isnull().sum()

round(birth.isnull().sum().sum()/birth.size, 2)*100

#Luego de graficar las columnas con datos nulos restantes, se encontró que no siguen una tendencia clara
#además de que no es posible tener un valor para rellenarlos ya que no hay una columna relacionada con que se puedan calcular
#sus valores, y tampoco es posible rellenarlos con un promedio debido a que representan estadísticas que tienen que 
#ser enteras. La decisión que se toma para tratar los nulos restantes es la de eliminarlos ya que solo representan un
#3% de la totalidad de los datos y no va a cambiar significativamente los resultados finales.
birth = birth.dropna().reset_index().drop("index", axis = 1)

birth.isnull().sum()

"""**DF DATA**"""

data.columns

data.isnull().sum()

#Se grafican las columnas con datos nulos que representan un porcentaje
# definir gráfica
fig = px.line(data, y=['fg%', '3p%', 'efg%', '2p%', 'ft%'], title ='<b>columnas de porcentajes con nulos<b>')

# agregar detalles
fig.update_layout(
    xaxis_title = 'índice',
    yaxis_title = 'valor',
    template = 'simple_white',
    title_x = 0.5,
    legend_title = 'nombre de la columna:')

fig.show()

#Como la gráfica tiene un comportamiento aproximadamente con media constante se decide rellenar los datos nulos
#con el promedio de la respectiva columna, excepto la columna de porcentaje de goles de campo (fg%) donde fueron 
#eliminados 4 datos nulos
data = data.fillna({'3p%':data['3p%'].mean(), 'ft%':data['ft%'].mean(),
                          'efg%':data['efg%'].mean(), '2p%':data['2p%'].mean()})
data = data.dropna()
data.shape

data.isnull().sum()

"""**DF DRAFT**"""

draft.columns

draft.isnull().sum()

#Se grafican todas las columnas que presentan datos nulos para observar su comportamiento
# definir gráfica
fig = px.line(draft, y=['agility', 'sprint','bench','vertical','draft_pick'], title ='<b>columnas con datos nulos<b>')

# agregar detalles
fig.update_layout(
    xaxis_title = 'índice',
    yaxis_title = 'valor',
    template = 'simple_white',
    title_x = 0.5,
    legend_title = 'Nombre columnas')

fig.show()

#Se puede notar una tendencia con cierta estacionalidad en las líneas de draft pick pero es normal debido a que es un
#dato que representa el lugar único que tomó cada jugador en el draft de su respectivo año, además se pudo encontrar
#mediante una pequeña investigación, que los datos que tienen nulos son jugadores que no fueron escogidos por ningún 
#equipo profesional entonces la decisón es eliminar estos jugadores ya que no son relevantes para la investigación
#Por otro lado, las demás variables parecen seguir una tendencia de media constante por lo que se decide 
#rellenar los nulos con el promedio de su respectiva columna. 
#Finalmente se decide eliminar la columna de veces que el jugador ha estado en la banca (bench) ya que no
#representa un dato relevante para la investigación y a su vez, tiene mas del 25% de datos nulos.

draft = draft.fillna({'agility':draft['agility'].mean(), 'sprint':draft['sprint'].mean(),
                      'vertical':draft['vertical'].mean(), 'height':draft['height'].mean(),
                      'weight':draft['height'].mean()})
draft = draft.drop(['bench'], axis=1)
draft = draft.dropna()
draft.isnull().sum()

"""##**1.4 BODEGAS DE DATOS**"""

birth.columns

data.columns

draft.columns

#bodega donde solo se muestren las columnas de los estados, los jugadores que tienen y los años que llevan en la nba
birth_tabla = birth[['state', 'player', 'yrs']]
birth_tabla.head()

#bodega donde se muestren solo los equipos, jugadores y posición
data_tabla = data[['tm', 'pos', 'player']]
data_tabla.head(20)

#bodega donde se muestre la posición en orden ascendente en el draft pick y el nombre del jugador
draft_tabla = draft[['draft_pick', 'player']].sort_values('draft_pick').reset_index().drop("index", axis = 1)
draft_tabla.head(20)

#bodega que muestre por cada año la altura, peso, alcance vertical y agilidad 
#con sus respectivos promedio, mediana, min y max

#el primer paso es crear tablas con los cálculos de cada variable separada
#Se crea una tabla que solo contenga el año y la altura para luego agrupar las alturas por año
tabla1 = draft[['year', 'height']]
datos_agrupados1 = tabla1.groupby(['year'])

# Calcula la altura promedio, mediana, máxima y mínima para cada año
tabla_height = datos_agrupados1.agg({'height':['mean', 'median', 'max', 'min']}).reset_index()
tabla_height.columns = ['año', 'height_mean','height_median','height_max','height_min']
tabla_height

#Se crea una tabla que solo contenga el año y el peso para luego agrupar los pesos por año
tabla2 = draft[['year', 'weight']]
datos_agrupados2 = tabla2.groupby(['year'])

# Calcula el peso promedio, mediano, máximo y mínimo para cada año
tabla_weight = datos_agrupados2.agg({'weight':['mean', 'median', 'max', 'min']}).reset_index()
tabla_weight.columns = ['año', 'weight_mean','weight_median','weight_max','weight_min']
tabla_weight

#Se crea una tabla que solo contenga el año y el alcance vertical para luego agrupar los alcances por año
tabla3 = draft[['year', 'vertical']]
datos_agrupados3 = tabla3.groupby(['year'])

# Calcula el alcance promedio, mediano, máximo y mínimo para cada año
tabla_vertical = datos_agrupados3.agg({'vertical':['mean', 'median', 'max', 'min']}).reset_index()
tabla_vertical.columns = ['año', 'vertical_mean','vertical_median','vertical_max','vertical_min']
tabla_vertical

#Se crea una tabla que solo contenga el año y el alcance vertical para luego agrupar los alcances por año
tabla4 = draft[['year', 'agility']]
datos_agrupados4 = tabla4.groupby(['year'])

# Calcula el alcance promedio, mediano, máximo y mínimo para cada año
tabla_agility = datos_agrupados4.agg({'agility':['mean', 'median', 'max', 'min']}).reset_index()
tabla_agility.columns = ['año', 'agility_mean','agility_median','agility_max','agility_min']
tabla_agility

#Se hace un merge uniendo 2 tablas a la vez.
hei_wei = pd.merge(tabla_height, tabla_weight, how = "inner", on = "año")
hei_wei.head()

hei_wei_ver = pd.merge(hei_wei, tabla_vertical, how = "inner", on = "año")

#Esta es la bodega final que se va a utilizar
draft_stats = pd.merge(hei_wei_ver, tabla_agility, how = "inner", on = "año")
draft_stats.head()

draft_stats.columns

#Se grafican los promedios de cada variable por año
# definir gráfica
fig = px.line(draft_stats, x ='año', y=['height_mean', 'weight_mean', 'vertical_mean','agility_mean'], 
              title ='<b>columnas de promedios draft_stats<b>')

# agregar detalles
fig.update_layout(
    xaxis_title = 'índice',
    yaxis_title = 'valor',
    template = 'simple_white',
    title_x = 0.5,
    legend_title = 'nombre de la columna:')

fig.show()

"""**Variables promedio de draft_stats**

Se observa una línea casi recta, lo que indica que el promedio se mantiene en todas las variables a lo largo de los años, por lo que se puede concluir que los jugadores de baloncesto tienen unas características específicas y los equipos profesionales ya tienen un estándar para los jugadores que eligen cada año.

##**1.5 TRANSFORMACIÓN Y NUEVAS VARIABLES**

**-En el DF birth, por medio de un diccionario, se crea una nueva variable llamada "region" en donde se van a organizar los estados con la segmentación oficial de EE.UU.**

**REGIÓN NORDESTE**

-Nueva Inglaterra (Maine, Nuevo Hampshire, Vermont, Massachusetts, Connecticut, Rhode Island)

-Atlántico Medio (Nueva York, Pensilvania, Nueva Jersey)

**REGIÓN MEDIO OESTE**

-Centro Norte Oriental (Michigan, Wisconsin, Illinois, Indiana, Ohio)

-Centro Norte Occidental (Minnesota, Dakota del Norte, Dakota del Sur, Iowa, 
Nebraska, Misuri, Kansas)

**REGIÓN SUR**

-Atlántico Sur (Maryland, Delaware, Virginia Occidental, Virginia, Carolina el Norte, Carolina del Sur, Georgia, Florida)

-Centro Sur Oriental (Kentucky, Tennessee, Alabama, Misisipi)

-Centro Sur Occidental (Arkansas, Oklahoma, Texas, Luisiana)

**REGIÓN OESTE**

-Montaña (Montana, Idaho, Wyoming, Colorado, Utah, Nevada, Arizona, Nuevo México)

-Pacífico (Alaska, Washington, Oregón, California, Hawái)
"""

birth['state'].unique()

# Agregar una nueva columna con menos categorías para saber dónde nació el jugador
dic = {"Maine":"Nordeste", "New Hampshire":"Nordeste", "Vermont":"Nordeste", "Massachusetts":"Nordeste", "Connecticut":"Nordeste",
       "Rhode Island":"Nordeste", "New York":"Nordeste", "Pennsylvania":"Nordeste", "New Jersey":"Nordeste", "Michigan":"Medio Oeste",
       "Wisconsin":"Medio Oeste", "Illinois":"Medio Oeste", "Indiana":"Medio Oeste", "Ohio":"Medio Oeste", "Minnesota":"Medio Oeste",
       "North Dakota":"Medio Oeste", "South Dakota":"Medio Oeste", "Iowa":"Medio Oeste", "Nebraska":"Medio Oeste", "Missouri":"Medio Oeste",
       "Kansas":"Medio Oeste", "Maryland":"Sur", "Delaware":"Sur", "West Virginia":"Sur", "Virginia":"Sur", "North Carolina":"Sur",
       "South Carolina":"Sur", "Georgia":"Sur", "Florida":"Sur", "Kentucky":"Sur", "Tennessee":"Sur", "Alabama":"Sur", "Mississippi":"Sur",
       "Arkansas":"Sur", "Oklahoma":"Sur", "Texas":"Sur", "Louisiana":"Sur", "Montana":"Oeste", "Idaho":"Oeste", "Wyoming":"Oeste",
       "Colorado":"Oeste", "Utah":"Oeste", "Nevada":"Oeste", "Nevada":"Oeste", "Arizona":"Oeste", "New Mexico":"Oeste", "Alaska":"Oeste",
       "DC":"Oeste", "Washingon":"Oeste", "Oregon":"Oeste", "California":"Oeste", "Hawaii":"Oeste"}

birth['region'] = birth['state'].replace(dic)
birth.head()

"""**-En el DF data, por medio de un diccionario, se crea una nueva variable llamada "division" en donde se van a organizar los equipos se acuerdo a la divisón a la que pertenecen.**

**división atlántico**

New York Knicks

Boston Celtics

Brooklyn Nets 

Philadelphia 76ers

Toronto Raptors

**división central**

Chicago Bulls

Cleveland Cavaliers

Detroit Pistons

Indiana Pacers

Milwaukee Bucks

**división sudeste**

Atlanta Hawks

Charlotte Bobcats

Miami Heat

Orlando Magic

Washington Wizards

**división sudoeste**

Dallas Mavericks

Houston Rockets

Memphis Grizzlies

New Orleans Pelicans

San Antonio Spurs

**división noroeste**

Denver Nuggets

Minnesota Timberwolves

Portland Trail Blazers

Seattle Supersonics

Utah Jazz

**división pacífico**

Golden State Warriors

Phoenix Suns

Sacramento Kings

Los Angeles Clippers

Los Angeles Lakers
"""

data['tm'].unique()

dic2 = {'TOR':'atlantico', 'MEM':'sudoeste', 'MIA':'sudeste', 'UTA':'noroeste', 'TOT':'atlantico', 'MIN':'noroeste', 'MIL':'central', 'CLE':'central', 'NOP':'sudoeste',
       'ORL':'sudeste', 'NYK':'atlantico', 'POR':'noroeste', 'WAS':'sudeste', 'PHO':'pacifico', 'DET':'central', 'GSW':'pacifico', 'CHO':'sudeste', 'LAL':'pacifico',
       'SAS':'sudoeste', 'SAC':'pacifico', 'LAC':'pacifico', 'OKC':'noroeste', 'DAL':'sudoeste', 'CHI':'central', 'ATL':'sudeste', 'IND':'central', 'DEN':'noroeste',
       'BRK':'atlantico', 'BOS':'atlantico', 'PHI':'atlantico', 'HOU':'sudoeste'}
#El equipo 'TOT' se agregó a la división atlántico debido a que este era el nombre que tenía anteriormente el equipo 
#actual de Toronto Raptors (TOR)
data['division'] = data['tm'].replace(dic2)
data['division'].head()

"""**-En la bodega de datos draft_tabla se crea por medio de una función una columna de categorías de draft_pick llamada category donde para la función se resta 1 a la columna de draft_pick para que empiece desde la posición cero, luego se divide entre 10 ya que son 60 draft_pick pero solo queremos 6 categorías que ordenen el draft pick 10 en 10
y luego se redondea hacia abajo y se suma uno para que las categorías no empiecen desde el cero.**

"""

#Creación de la función
def draft_pick_cat(draft_tabla):
    draft_tabla['category'] = ((draft_tabla['draft_pick'] - 1) // 10) + 1
    return draft_tabla

# Se llama la función
draft_tabla = draft_pick_cat(draft_tabla)
draft_tabla

"""##**1.6 ANÁLISIS DESCRIPTIVO Y PREGUNTAS**

### Descripciòn bases y relaciòn 
1. "BIRTH PLACE":
Esta base de datos contiene la información de fecha y lugar de nacimiento de los jugadores de la NBA, junto con estadísticas individuales.
Proporciona detalles sobre la carrera y desempeño de los jugadores, como partidos jugados, minutos, goles de campo, tiros de tres puntos, rebotes, asistencias, etc.
Las columnas principales incluyen: Player (nombre del jugador), Yrs (años jugados), G (partidos jugados), MP (minutos jugados), FG (goles de campo), 3P (tiros de tres puntos), TRB (rebotes totales), AST (asistencias), PTS (puntos), y más.

2. "DATA PROCESSED":
Esta base de datos contiene información detallada sobre los jugadores de la NBA y sus estadísticas individuales, así como el equipo para el que juegan.
Proporciona información sobre la posición del jugador, su edad, el equipo al que pertenece, los partidos jugados, los goles de campo, los tiros de tres puntos, los rebotes, las asistencias, los robos, los bloqueos, etc.
Las columnas principales incluyen: Player (nombre del jugador), Pos (posición), Age (edad), Tm (equipo), G (partidos jugados), FG (goles de campo), 3P (tiros de tres puntos), TRB (rebotes totales), AST (asistencias), STL (robos), BLK (bloqueos), y más.

3. "DRAFT COMBINE ALL YEARS":
Esta base de datos contiene datos relacionados con los drafts de la NBA entre los años 2009 y 2017, así como características físicas de los jugadores.
Proporciona detalles sobre los jugadores seleccionados en los drafts, como su altura, envergadura, alcance vertical, peso, agilidad, etc.
Las columnas principales incluyen: Player (nombre del jugador), Year (año del draft), Draft pick (turno de selección), Height (altura con zapatos), Vertical (salto o alcance vertical máximo), Weight (peso), Agility (agilidad), Sprint (aceleración o pique), y más.

4. Relación entre las bases de datos:

La base de datos "BIRTH PLACE" y "DATA PROCESSED" están relacionadas por la columna "Player" (nombre del jugador), que se utiliza para identificar a los jugadores en ambas bases de datos.
La base de datos "DATA PROCESSED" y "DRAFT COMBINE ALL YEARS" están relacionadas por la columna "Player" (nombre del jugador), que también se utiliza para identificar a los jugadores en ambas bases de datos.
Estas relaciones permiten combinar la información de las tres bases de datos para realizar análisis más completos y obtener información más detallada sobre los jugadores de la NBA en términos de su rendimiento, características físicas y trayectoria en el draft.

###Birth
"""

#1. Cuantos jugadores por estado tienen mas puntos triples (top 10)

# Obtener el top 10 de jugadores con más puntos triples
top_10_triples = birth.nlargest(10, "3p")

# Seleccionar las columnas "PLAYER", "STATE" y "3P" para el top 10
jugadores_top_10 = top_10_triples[["player", "state", "3p"]]

jugadores_top_10

#2.  ¿puedes encontrar el jugador más eficiente en términos de puntos por partido jugado?  

# Calcular la eficiencia de puntos por partido
birth["efficiency"] = birth["pts"] / birth["g"]

# Encontrar el jugador más eficiente en términos de puntos por partido jugado
jugador_eficiente = birth.loc[birth["efficiency"].idxmax()]

print("Jugador más eficiente:")
print(jugador_eficiente["player"])
print("Puntos por partido jugado:")
print(jugador_eficiente["efficiency"])

"""### Data"""

# 1.  determinar la correlación entre la edad de los jugadores y 
#su eficiencia en el campo, medida por el porcentaje efectivo de tiros de campo (eFG%) en la base de datos


# Calcular la correlación entre la edad y el porcentaje efectivo de tiros de campo
correlation = data["age"].corr(data["efg%"])

print("Correlación entre edad y eficiencia en el campo (efg%):", correlation)

"""como podemos ver en la pregunta anterior, no se encuentra relación entre la edad y la eficiencia de los jugadores, la edad no parece ser un factor relevante """

#2. ¿Cuál es el jugador con el mayor porcentaje de acierto en tiros de campo (fg%) 
#entre aquellos que han jugado al menos 50 juegos (g) en la temporada?

# Filtrar los jugadores que han jugado al menos 50 juegos
df_filtrado = data[data["g"] >= 50]

# Encontrar el jugador con el mayor porcentaje de acierto en tiros de campo (fg%)
mejor_jugador = df_filtrado.loc[df_filtrado["fg%"].idxmax()]

print("Jugador con el mayor porcentaje de acierto en tiros de campo (fg%) entre los que han jugado al menos 50 juegos:")
print("Jugador:", mejor_jugador["player"])
print("Porcentaje de acierto en tiros de campo (fg%):", mejor_jugador["fg%"])

"""### Draft"""

#1. ¿Existe alguna relación entre la altura de los jugadores (height) y su velocidad (sprint)?

# Calcular la correlación entre la altura y la velocidad
correlation = draft['height'].corr(draft['sprint'])

print("Correlación entre la altura y la velocidad:")
print(correlation)

""" existe una relación moderada entre la altura y la velocidad, ya que tenemos un valor positivo lo que sugiere que existe una tendencia de aumento conjunto entre ambas variables, es decir, a medida que la altura aumenta, la velocidad tiende a aumentar también. """

import plotly.express as px
#correlatio = px.draft[['height','sprint']].tips()
fig = px.scatter(x=draft["height"], y=draft["sprint"])
fig.show()

#2. ¿Cuál es el jugador más ágil de cada año?

# Agrupar por año del Draft y encontrar el jugador con el máximo agility en cada grupo
max_agility_players = draft.groupby('year')['agility'].idxmax()
result = draft.loc[max_agility_players, ['year', 'player', 'agility']]

# Imprimir los resultados
result

"""## 3 Relacionales"""

merged_data = pd.merge(data,birth, on=['player'], how='inner', suffixes=('_data', '_birth'))
merged_data = pd.merge(merged_data, draft, on='player')
pd.set_option("display.max_rows", None)
merged_data

#1. ¿Cuál es el jugador que ha logrado la mayor cantidad de puntos triples (3P) por juego durante su carrera en la NBA, 
#considerando solo a los que fueron seleccionados en el Draft en los años 2010, 2012 y 2014?

# Filtrar los jugadores seleccionados en los años 2010, 2012 y 2014
filtro_data = merged_data[merged_data['year'].isin([2010, 2012, 2014])]

# Calcular los puntos triples por juego para cada jugador
filtro_data.loc[:, '3p_por_juego'] = filtro_data['3p_birth'] / filtro_data['g_birth']
#filtered_data['3p_per_game'] = filtered_data['3p_x'] / filtered_data['g_x']

# Obtener el jugador con la mayor cantidad de puntos triples por juego
max_3P_por_juego = filtro_data.loc[filtro_data['3p_por_juego'].idxmax(), 'player']

# Imprimir el resultado
print("El jugador con la mayor cantidad de puntos triples en la NBA, en los años 2010, 2012 y 2014, es:", max_3P_por_juego)

#2. ¿Cuál es la relación entre la altura (height) de los jugadores y su rendimiento 
#en términos de porcentaje de tiros de campo efectivos (eFG%) en la temporada de su año de debut en la NBA?

#filtrar base 
debut_season_data = merged_data[merged_data['year'] == merged_data['year']]

correlation_height_efg = debut_season_data['height'].corr(debut_season_data['efg%'])
print("Correlación entre altura y efg% en la temporada de debut:", correlation_height_efg)

#3 ¿Cuál es el top 5 de estados que mas jugadores tienen de la posición centro?

#Unir las bodegas de datos creadas a partir de birth y data
merged_data2 = pd.merge(birth_tabla, data_tabla, on=['player'], how='inner')
pd.set_option("display.max_rows", None)

# Filtrar los jugadores de la posición centro.
filtro_data2 = merged_data2[merged_data2['pos'].isin(['C'])]

#Agrupar por estado y sacar el top 5
top_5 = filtro_data2.groupby(['state'])[['player']].count()
top_5 = top_5.nlargest(5, "player").reset_index()
top_5

draft_tabla.dtypes

#4 ¿Cómo está distribuído el historial del draft pick? 

#A) crear base
d_tabla_c = draft_tabla.copy()
d_tabla_c['category'] = d_tabla_c['category'].astype(str)
df0 = d_tabla_c.groupby(['category'])[['player']].count().sort_values('player', ascending = False).rename(columns={'player':'counts'})
df0['ratio'] = df0.apply(lambda x: x.cumsum()/df0['counts'].sum())

# definir figura
fig = go.Figure([go.Bar(x=df0.index, y=df0['counts'], yaxis='y1', name='total jugadores'),
                 go.Scatter(x=df0.index, y=df0['ratio'], yaxis='y2', name='porcentaje acumulado', hovertemplate='%{y:.1%}', marker={'color': '#000000'})])

# agregar detalles
fig.update_layout(template='plotly_white', showlegend=False, hovermode='x', bargap=.3,
                  title={'text': '<b>Pareto # de jugadores por draft pick<b>', 'x': .5}, 
                  yaxis={'title': 'jugadores'},
                  yaxis2={'rangemode': "tozero", 'overlaying': 'y', 'position': 1, 'side': 'right', 'title': 'ratio', 'tickvals': np.arange(0, 1.1, .2), 'tickmode': 'array', 'ticktext': [str(i) + '%' for i in range(0, 101, 20)]})

fig.show()

"""**Pareto de número de jugadores por draft pick**

En la gráfica se observan 6 categorías del draft_pick las cuáles fueron organizadas desde la bodega de datos draft_tabla que a su vez fue organizada desde el dataframe fuente que es el de draft.
Estas 6 categorías corresponden a los 60 draft pick que son las posiciones en las cuales fue elegido cada jugador en el evento de draft de cada año, las cuáles fueron reorganizadas en grupos de 10 en 10 por lo que la categoría 1 corresponde a los draft pick del 1 al 10, la categoría 2 a los draft pick del 11 al 20 y así sucesivamente.

Este reordenamiento por categorías se hace con el fin de analizar la distribución del historial de los draft pick de una manera mas amigable para el lector ya que si se hacía con cada una de las posciones, quedaría un gráfico demasiado extenso y difícil de entender.

En el Pareto se identifican los siguientes hallazgos:

-La categoría 2 (draft pick 11-20) es la que mas jugadores tiene.

-Las categorías 2, 3 y 4 (draft pick del 11-40) concentran mas de la mitad de los jugadores (57,3%) lo que quiere decir sin tener que analizar los demás resultados, que normalmente, los jugadores se eligen entre la posición 11 y 40 del draft.

-La categoría 2 del draft pick (draft pick 1-10) representa tan solo un 16,1% de los jugadores escogidos; esto puede deberse a que en la base de datos original hay datos incompletos ya que si hay tanta concentración en las posiciones 2, 3 y 4, es fácilmente deducible que antes de ellos tuvieron que ser escogidos mas jugadores de los que representa el acumulado.

-La categoría 6 es la que menos jugadores representa con apenas 40 de los casi 400 que hay en el dataframe que se tiene, este dato sí puede estar correcto desde la base de datos original porque en el draft de cada año no se tiene un número exacto de jugadores a ser escogidos, pero sí se tiene la regla de que pueden ser escogidos 60 o menos.

"""

#5 cuál es la relación entre el peso, la altura, el alcance vertical, y la agilidad

# definir figura
fig = px.parallel_coordinates(draft, color ='year', labels = ['year'],
                        dimensions = ['weight', 'height', 'vertical', 'agility','draft_pick'],
                        color_continuous_scale = px.colors.diverging.Tealrose)

fig.show()

"""**Coordenadas paralelas del draft**

En la gráfica se tomaron las columnas de peso, altura, alcance vertical y agilidad donde se observaron los siguientes hallazgos:

-El peso parece tener cierta correlación negativa con la agilidad ya que si se toma una muestra en los pesos mas grandes, se puede ver que los puntos en la columna de agilidad se concentran en la parte mas baja.

-Aunque los puntos en la columna de peso están mucho mas concentrados entre 200 y 300, se puede observar cierta correlación positiva con la altura ya que se ve una concentración de los puntos en la parte alta de la columna, que es la que representa las alturas mas grandes. También es cierto que las alturas están mucho mas dispersas dentro de la columna pero esto puede deberse a que la escala de alturas no está entre valores muy alejados.

-Si se comparan las columnas de alcance vertical y agilidad se puede notar que tienen una concentración en mas o menos los mismos rangos, lo que podría explicar que el draft de la NBA puede que tenga ya ciertos estándares y prototipos de los jugadores que pueden escoger y llegar a ser parte de los equipos porfesionales.

-Finalmente cuando se observa la columna de agilidad y draft pick se logra captar que la agilidad tiene sus valores mucho mas concentrados entre 10.5 y 11.5 y los de draft pick muchos mas distribuídos en toda la columna por lo que la conclusión es que sin importar mucho el draft pick, la agilidad de los jugadores tiene un estándar o un rango mas o menos establecido.

"""

#6 ¿Cómo están distribuídos los jugadores en las regiones de EE.UU?

# crear base
df0 = birth.groupby(['region'])[['player']].count().sort_values('player', ascending = False).rename(columns={'player':'counts'})
df0['ratio'] = df0.apply(lambda x: x.cumsum()/df0['counts'].sum())

# definir figura
fig = go.Figure([go.Bar(x=df0.index, y=df0['counts'], yaxis='y1', name='jugadores'),
                 go.Scatter(x=df0.index, y=df0['ratio'], yaxis='y2', name='porcentaje acumulado de jugadores', hovertemplate='%{y:.1%}', marker={'color': '#000000'})])

# agregar detalles
fig.update_layout(template='plotly_white', showlegend=False, hovermode='x', bargap=.3,
                  title={'text': '<b>Pareto # de jugadores por Región<b>', 'x': .5}, 
                  yaxis={'title': 'jugadores'},
                  yaxis2={'rangemode': "tozero", 'overlaying': 'y', 'position': 1, 'side': 'right', 'title': 'ratio', 'tickvals': np.arange(0, 1.1, .2), 'tickmode': 'array', 'ticktext': [str(i) + '%' for i in range(0, 101, 20)]})

fig.show()

"""**Pareto de jugadores por región**


Al realizar la gráfica se encontró lo siguiente:

1) La región sur es la que mas jugadores ha aportado a la NBA con 995 jugadores, representando un 37,2%.

2) Con la divisón por regiones se logra ver una gráfica mas fácil de entender, con valores cercanos que pueden ayudar a explicar la cantidad de jugadores estadounidenses que hay en la NBA.

3) La región Nordeste es la que menos jugadores ha aportado a la NBA con apenas 495.

4) En la región Oeste se encuentran estados como Alaska o Hawaii que son los que menos han aportado jugadores a la NBA según fuentes externas a la investigación; sin embargo la región Oeste no es la que menos jugadores ha aportado.

5) En la región sur están estados como Nueva York, Pensilvania o Nueva Jersey, que se encuentran en los primeros lugares de número de jugadores en la NBA según estudios hechos por expertos en la NBA.
"""

#7 ¿Cómo están distribuídos los juagadores según la divisón a la que pertenece su equipo?

# crear dataset
base = data.groupby(['division'])[['player']].count().reset_index()

# sacar valor total de los jugadores en el DF
cant_jugadores = data['player'].count()

# hacer la gráfica
fig = px.pie(base , values = 'player', names = 'division', title = '<b>% Jugadores en cada división de la NBA<b>',
             hole = .5)

# poner detalles a la gráfica
fig.update_layout(
    template = 'simple_white',
    legend_title = 'División',
    title_x = 0.5,
    annotations = [dict(text = str(cant_jugadores), x=0.5, y = 0.5, font_size = 40, showarrow = False )])

fig.show()

"""**Dona sobre jugadores por divisón de la NBA**

Al realizar el gráfico se puede notar a simple vista que las diviones tienen una cantidad de jugadores pareja. Sin embargo se puede observar que la divisón atlántico es la que mas jugadores tiene en sus equipos. Esto puede deberse a que muchos jugadores han militado en equipos distintos pero estar en los equipos de la divisón atlántico es algo que pueden llegar a tener mas en común.

-La diferencia entre la divisón que mas jugadores tiene (atlántico) y la que menos tiene (central) es de poco mas de 50 jugadores lo que corrobora la conclusión de que los jugadores están bien repartidos por todas las diviones. Además un dato externo que también ayuda a explicar el hecho es que cada divisón debe tener reglamentariamente 5 equipos, pero no hay una regla que diga que un equipo deba tener exactamente la misma cantidad de jugadores; solo existe la regla de que máximo puede tener 22 por lo que tener menos de estos 22, es legal.

**informaciòn adicional que nos podria ayudar a tener un mejor analisis.**

Datos de lesiones: Incorporar información sobre lesiones podría ser útil para evaluar la durabilidad y la salud de los jugadores a lo largo de su carrera. Podríamos incluir datos sobre lesiones pasadas, la duración de las lesiones, el tiempo de recuperación y cualquier impacto significativo que hayan tenido en el desempeño del jugador.

Datos de popularidad y reconocimiento: Si hay datos disponibles sobre la popularidad de los jugadores, como votaciones para el Juego de las Estrellas, premios individuales, menciones en los medios, etc., podrías utilizar esta información para evaluar la relación entre el rendimiento en la cancha y la percepción pública de los jugadores.

**los datos se tomaron de la página DATA.WORLD, página que contiene bases de datos abiertos.**

En las tablas que se eligieron van a encontrar variables como el nombre de jugadores, los puntos que se han anotado por partido, el equipo, los intentos de puntos, el lugar de nacimiento con fecha, su edad, entre otros datos. Las bases de datos están un poco sucias, con algunos espacios en blanco de datos de los jugadores aún así la información de las tablas es buena para analizar y sacar algunas conclusiones de los jugadores. LINKS: https://data.world/gmoney/nba-players-birthplaces https://data.world/achou/nba-draft-combine-measurements https://data.world/srihithduggi/nba-stats-dataset
"""